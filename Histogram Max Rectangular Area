//code here
Stack<Integer> stack = new Stack<>();
        long lcsh[] = new long[(int) n];
        long rcsh[] = new long[(int) n];
        for(int i=0;i<hist.length;i++){
            while(!stack.empty() && hist[stack.peek()]>=hist[i]){
                stack.pop();
            }
            lcsh[i]= stack.empty()?-1:stack.peek();
            stack.push(i);
        }
        stack = new Stack<>();
        for(int i=hist.length-1;i>=0;i--){
            while(!stack.empty() && hist[stack.peek()]>=hist[i]){
                stack.pop();
            }
            rcsh[i]= stack.empty()?hist.length:stack.peek();
            stack.push(i);
        }
        long maxSoFar = 0;
        for(int i=0;i<n;i++){
            maxSoFar = Math.max(((rcsh[i]-lcsh[i]-1)*hist[i]),maxSoFar);
        }
        return maxSoFar; 

...
